class Color{constructor(r,t,o,n=255){this.r=r,this.g=t,this.b=o,this.a=n}}const HSLToRGB=(r,t,o)=>{if(null==r)return[0,0,0];let n,e,a,l=(1-Math.abs(2*o/100-1))*(t/100),i=r/60,h=l*(1-Math.abs(i%2-1));i=Math.floor(i),0===i?(n=l,e=h,a=0):1===i?(n=h,e=l,a=0):2===i?(n=0,e=l,a=h):3===i?(n=0,e=h,a=l):4===i?(n=h,e=0,a=l):5===i&&(n=l,e=0,a=h);let s=o/100-l/2;return n=Math.round(255*(n+s)),e=Math.round(255*(e+s)),a=Math.round(255*(a+s)),[n,e,a]},RGBToHSL=(r=0,t=0,o=0)=>{r/=255,t/=255,o/=255;const n=Math.max(r,t,o),e=n-Math.min(r,t,o),a=e?n===r?(t-o)/e:n===t?2+(o-r)/e:4+(r-t)/e:0;return[60*a<0?60*a+360:60*a,100*(e?n<=.5?e/(2*n-e):e/(2-(2*n-e)):0),100*(2*n-e)/2]},rgbFormat=r=>{const t=r.split(",");if(t.length<3||t.length>4)throw Error("Mininum and maximum elements: 3, 4");for(let o=0;o<t.length;o++){let n=t[o].match(/\d+/);if(!n)throw Error(`Invalid RGB color format ${r}\nValid format: '255, 0, 12' or '255, 0, 12, 255'`);if(n=parseInt(n),n<0||n>255)throw Error(`RGB color ${n} is not between 0 and 255`);t[o]=n}return t},hslFormat=r=>{const t=r.split(","),o=[360,100,100,255];let n;if(t.length<3||t.length>4)throw Error("Mininum and maximum elements: 3, 4");for(let e=0;e<t.length;e++){let a=t[e].match(/\d+/);if(!a)throw Error(`Invalid HSL color format ${r}\nValid format: '360, 100, 100' or '123, 12, 12, 255'`);if(a=parseInt(a),n=o[e],a<0||a>n)throw Error(`RGB color ${a} is not between 0 and ${n}`);t[e]=a}return t},isDigit=r=>{for(const t of r)if(0=="1234567890".includes(t))return!1;return!0},genChunks=(r,t)=>{let o=[];for(let n=0;n<r.length;n+=t)o.push(r.slice(n,n+t));return o},codeFormat=r=>{if(0==isDigit(r))throw Error(`Invalid code format ${r}\nValid format: A value encoded on 6 bytes`);if((r=parseInt(r))<0||r>16777215)throw Error(`Invalid value ${r}\nValid format: an integer (min: 0, max: 0xffffff)`);const t=(r=r.toString(16)).length;return t<6&&(r="0".repeat(6-t)+r),255===(r=genChunks(r,2).map((r=>parseInt(r,16))))[0]&&(r[0]=0),r[0]=360*r[0]/255,r[1]=100*r[1]/255,r[2]=100*(r[2]/255/2+.5),r},COLOR_FORMAT={rgb:rgbFormat,hsl:hslFormat,code:codeFormat},blackAndWhite=r=>{const t=(r.r+r.g+r.b)/3;r.r=t,r.g=t,r.b=t},defaultOp=(r,t)=>{r.r=r.r*t.r/255,r.g=r.g*t.g/255,r.b=r.b*t.b/255,r.a=r.a*t.a/255},COLOR_MODE={default:defaultOp,grayscale:blackAndWhite};
//# sourceMappingURL=color.min.js.map